from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.fsm.context import FSMContext
from ..keyboards.common import main_menu, cancel_kb, back_kb, admin_menu
from ..states.forms import RequestForm
from ..db.dao import Database
from ..config import settings

router = Router()

db = Database(settings.db_path)


async def send_services(msg: types.Message) -> bool:
    """Send stored services message to the user."""
    service_ids = db.get_service_messages()
    if not service_ids:
        return False
    ok = False
    for sid in service_ids:
        try:
            await msg.bot.copy_message(msg.chat.id, settings.admin_id, sid)
            ok = True
        except Exception:
            pass
    return ok

@router.message(CommandStart())
async def start(msg: types.Message):
    db.add_user(msg.from_user.id, msg.from_user.username or "")
    if msg.from_user.id == settings.admin_id:
        await msg.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admin_menu)
        return
    await send_services(msg)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ üëá", reply_markup=main_menu)


@router.message(F.text == "–ú–æ–∏ —É—Å–ª—É–≥–∏")
async def my_services(msg: types.Message):
    sent = await send_services(msg)
    if not sent:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥")
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞", reply_markup=back_kb)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def fill_form(msg: types.Message, state: FSMContext):
    await state.set_state(RequestForm.service)
    await msg.answer("–ö–∞–∫–∞—è –∏–∑ –º–æ–∏—Ö —É—Å–ª—É–≥ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∏–ª—Å, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ª–æ–≥–æ—Ç–∏–ø –∏ —Ç.–ø", reply_markup=cancel_kb)

@router.message(RequestForm.service, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(RequestForm.description, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(RequestForm.contact, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_form(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu)

@router.message(RequestForm.service)
async def process_service(msg: types.Message, state: FSMContext):
    await state.update_data(service=msg.text)
    await state.set_state(RequestForm.description)
    await msg.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –¥–ª—è —á–µ–≥–æ –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º:\n‚Äî –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –±—Ä–µ–Ω–¥ / –º–∞–≥–∞–∑–∏–Ω / —Å–æ—Ü—Å–µ—Ç–∏ \n‚Äî –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É \n‚Äî –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        reply_markup=cancel_kb
    )

@router.message(RequestForm.description)
async def process_description(msg: types.Message, state: FSMContext):
    text = msg.text or msg.caption or ""
    media = None
    if msg.photo:
        media = f"photo:{msg.photo[-1].file_id}"
    elif msg.video:
        media = f"video:{msg.video.file_id}"
    await state.update_data(description=text, media=media)
    await state.set_state(RequestForm.contact)
    await msg.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏", reply_markup=cancel_kb)


@router.message(RequestForm.contact)
async def process_contact(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    service = data.get("service")
    description = data.get("description")
    media = data.get("media")
    contact = msg.text
    db.add_request(
        msg.from_user.id,
        msg.from_user.username or "",
        service,
        description,
        contact,
        media,
    )
    await state.clear()
    await msg.answer(
        "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∑–∞—è–≤–∫—É! \U0001F64C\n–ú–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –º–Ω–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu
    )
    try:
        text = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{msg.from_user.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.username or msg.from_user.id}\n"
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}"
        )
        if media:
            kind, file_id = media.split(":", 1)
            if kind == "photo":
                await msg.bot.send_photo(settings.admin_id, file_id, caption=text)
            else:
                await msg.bot.send_video(settings.admin_id, file_id, caption=text)
        else:
            await msg.bot.send_message(settings.admin_id, text)
    except Exception:
        pass

@router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é DaniAi")
async def contact_direct(msg: types.Message):
    await msg.answer("–°–≤—è–∂–∏—Ç–µ—Å—å: @DaniAi_2")